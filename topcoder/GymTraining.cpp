#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GymTraining {
public:
	int trainingTime(int needToTrain, int minPulse, int maxPulse, int trainChange, int restChange) {
		int mins = 0, pulse = minPulse;
		int mintrain = 0;
		
		if(minPulse + trainChange > maxPulse) return -1;
		
		while(1)
		{
		
			int newPulse = pulse + trainChange;
			if(newPulse > maxPulse)
			{
				newPulse = newPulse-trainChange;
				newPulse -= restChange;
				cout<<"np1="<<newPulse<<endl;
				if(newPulse < minPulse) newPulse = minPulse;
				mins++;
			}
			else
			{
				cout<<"np2="<<newPulse<<endl;
				mins++;
				mintrain++;
				if(mintrain == needToTrain) break;
			}
			pulse = newPulse;
			
		}
		return mins;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	GymTraining *obj;
	int answer;
	obj = new GymTraining();
	clock_t startTime = clock();
	answer = obj->trainingTime(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 70;
	p2 = 120;
	p3 = 25;
	p4 = 15;
	p5 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 100;
	p1 = 50;
	p2 = 100;
	p3 = 5;
	p4 = 200;
	p5 = 109;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 60;
	p2 = 70;
	p3 = 11;
	p4 = 11;
	p5 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 200;
	p1 = 50;
	p2 = 200;
	p3 = 150;
	p4 = 1;
	p5 = 30050;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 19;
	p1 = 89;
	p2 = 143;
	p3 = 17;
	p4 = 13;
	p5 = 40;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
