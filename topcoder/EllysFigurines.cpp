#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class EllysFigurines {
public:
	int getMoves(vector <string> board, int R, int C) {
		int rows = board.size();
		int cols = board[0].size();
		if(R >= rows || C>= cols) return 1;
		int nmoves = 0;
		while(1)
		{
			int maxcuts = 0;
			bool isrow=false, iscol=false;
			int rowcolnum = -1;
			int curcuts = 0;
			for(int r=0; r<=(rows-R); r++)
			{
				curcuts = 0;
				for(int rr=0; rr<R; rr++)
				{
					int currow = r+rr;
					for(int cc=0; cc<cols; cc++)
						if(board[currow][cc] == 'X') curcuts++;
				}

				//if(curcuts == 0) break;
				if(curcuts > maxcuts)
				{
					maxcuts = curcuts;
					isrow = true; 
					iscol = false;
					rowcolnum = r;
				}
			}
			if(maxcuts == 0) break;	
			for(int c=0; c<=(cols-C); c++)
			{
				int curcuts = 0;
				for(int cc=0; cc<C; cc++)
				{
					int curcol = c+cc;
					for(int rr=0; rr<rows; rr++)
						if(board[rr][curcol] == 'X') curcuts++;
				}

				//if(curcuts == 0) break;
				if(curcuts > maxcuts)
				{
					maxcuts = curcuts;
					isrow = false;
					iscol = true;
					rowcolnum = c;
				}
			}
			if(maxcuts == 0) break;
			nmoves++;

			if(isrow)
			{
				cout<<"row: "<<rowcolnum<<", maxcut="<<maxcuts<<endl;
				for(int rr=0; rr<R; rr++)
				{
					int currow = rowcolnum+rr;
					for(int cc=0; cc<cols; cc++)
						board[currow][cc] ='.';
				}
			}

			if(iscol)
			{
				cout<<"col: "<<rowcolnum<<", maxcut="<<maxcuts<<endl;			
				for(int cc=0; cc<C; cc++)
				{
					int curcol = rowcolnum+cc;
					for(int rr=0; rr<rows; rr++)
						board[rr][curcol] ='.';
				}
			}				
		}	
		return nmoves;

	}

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	EllysFigurines *obj;
	int answer;
	obj = new EllysFigurines();
	clock_t startTime = clock();
	answer = obj->getMoves(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {".X.X.","XX..X",".XXX.","...X.",".X.XX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".X.X.","XX..X",".X.X.","...X.",".X.XX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"XXXXXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"XXXXX","X....","XXX..","X....","XXXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 1;
	p3 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"XXX..XXX..XXX.",".X..X....X...X",".X..X....X...X",".X..X....X...X",".X...XXX..XXX.","..............","...XX...XXX...","....X......X..","....X....XXX..","....X......X..","...XXX..XXX..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	p3 = 7;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
	//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
