#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LoveCalculator {
public:
	int count(string s, char c) {
		int cnt = 0;
		for(int i=0; i<s.size(); i++) if(s[i] == c) cnt++;
		return cnt;
	}
	
	string findBoy(string girl, vector <string> boys) {
		sort(boys.begin(), boys.end());
		int mlove = 0;
		string boy = boys[0];
		for(int i=0; i<boys.size(); i++)
		{
			int L = count(boys[i], 'L') + count(girl, 'L');	
			int O = count(boys[i], 'O') + count(girl, 'O');	
			int V = count(boys[i], 'V') + count(girl, 'V');		
			int E = count(boys[i], 'E') + count(girl, 'E');
			
			int love = 	 ((L+O)*(L+V)*(L+E)*(O+V)*(O+E)*(V+E))%100;
			if(love > mlove) { mlove = love; boy = boys[i]; }							
		}
		return boy;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LoveCalculator *obj;
	string answer;
	obj = new LoveCalculator();
	clock_t startTime = clock();
	answer = obj->findBoy(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "LOVE";
	string t1[] = {"JACOB","FRANK","DANO"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "FRANK";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "JANE";
	string t1[] = {"THOMAS","MICHAEL","INDY","LIU"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "INDY";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "LILLY";
	string t1[] = {"PIERRE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "PIERRE";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "MERYLOV";
	string t1[] = {"JOHN","DAVE","STEVE","JOHN","DAVE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "DAVE";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "LLOL";
	string t1[] = {"BVERON","CVERON","AVERON","DVERON"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "AVERON";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "VELYLEOCEVE";
	string t1[] = {"YVXHOVE","LCOKO","OGWSJVEVEDLE","WGFVSJEL","VLOLUVCBLLQVESWHEEKC"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "VLOLUVCBLLQVESWHEEKC";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
