#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LinearPolyominoCovering {
public:
	string findCovering(string region) {
		string s = region;
		int start = 0;
		for(int i=0; i<s.size(); i++) {
			if(s[i] == '.' || i==s.size()-1) {
 			if(s[i]=='X' && start == -1) return "impossible";

				if(start == -1) continue;
				int len = s[i] == '.' ? i-start : i-start+1;
				cout<<"len="<<len<<",start="<<start<<endl;
				if(len%2!=0) return "impossible";
				int n4 = len/4;
				int n2 = (len-(n4*4))/2;
				cout<<"n4="<<n4<<",n2="<<n2<<endl;
				
				int j = start;
				for(int k=0; k<n4; k++) { s[j++] = 'A'; s[j++] = 'A';s[j++] = 'A';s[j++] = 'A'; }
				for(int k=0; k<n2; k++) { s[j++] = 'B'; s[j++] = 'B'; }
				
				start = -1;
			}
			else if(start == -1) { start = i; cout<<"start="<<i<<endl; }
		}
		return s;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LinearPolyominoCovering *obj;
	string answer;
	obj = new LinearPolyominoCovering();
	clock_t startTime = clock();
	answer = obj->findCovering(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "XXXXXX";
	p1 = "AAAABB";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XX.XX";
	p1 = "BB.BB";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXX....XXX.....XX";
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "X";
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "XX.XXXXXXXXXX..XXXXXXXX...XXXXXX";
	p1 = "BB.AAAAAAAABB..AAAAAAAA...AAAABB";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
